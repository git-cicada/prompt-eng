# -*- coding: utf-8 -*-
"""prompt_optimization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KCZWIPqNwcGnF_9J0v13wJRvjTuRpye8
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install openai pandas --upgrade


import pandas as pd
import openai



# Define two variants of the prompt
prompt_A = """Product description: A pair of shoes that can fit any foot size.
Seed words: adaptable, fit, omni-fit.
Product names:"""

prompt_B = """Product description: A home milkshake maker.
Seed words: fast, healthy, compact.
Product names: HomeShaker, Fit Shaker, QuickShake, Shake Maker

Product description: A watch that can tell accurate time in space.
Seed words: astronaut, space-hardened, eliptical orbit
Product names: AstroTime, SpaceGuard, Orbit-Accurate, EliptoTime.

Product description: A pair of shoes that can fit any foot size.
Seed words: adaptable, fit, omni-fit.
Product names:"""




client = openai.OpenAI(
    base_url="http://127.0.0.1:1234/v1",  # LM Studio's default local server
    api_key="lm-studio"  # Dummy key, LM Studio doesn't require auth
)



def get_response(prompt):
    response = client.chat.completions.create(
        model="llama-3.2-3b-instruct",
        messages=[
            {
                "role": "system",
                "content": "You are a helpful assistant."
            },
            {
                "role": "user",
                "content": prompt
            }
        ]
    )
    return response.choices[0].message.content

# Iterate through the prompts and get responses
test_prompts = [prompt_A, prompt_B]
responses = []
num_tests = 5

for idx, prompt in enumerate(test_prompts):
    # prompt number as a letter
    var_name = chr(ord('A') + idx)

    for i in range(num_tests):
        # Get a response from the model
        response = get_response(prompt)

        data = {
            "variant": var_name,
            "prompt": prompt,
            "response": response
            }
        responses.append(data)

# Convert responses into a DataFrame
df = pd.DataFrame(responses)

# Save the DataFrame as a CSV file
df.to_csv("responses.csv", index=False)

print(df)

"""------------------------------------------------------"""
print("RUN prompt_optimisation_terminal.py to start the A/B testing.")
print("python3 prompt_optimisation_terminal.py")
print("------------------------------------------------------")